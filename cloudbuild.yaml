# steps:
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['build', '-f', 'ci.Dockerfile', '-t', 'uplinkdlt/uplink-dev', '.']
# options:
#   machineType: 'N1_HIGHCPU_8'


timeout: 3600s # Cache misses are slow to rebuild
substitutions:
  # Bump the version if you make changes to `ci/Dockerfile
  _BUILD_IMAGE: gcr.io/uplink-test-cluster-174313/fcl-ci:v3
options:
  machineType: N1_HIGHMEM_8
steps:
  # Build uplink docker image with kaniko

  - id: "build-ci-base-image"
    name: gcr.io/cloud-builders/docker
    # waitFor: ['-']
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      if ! docker pull $_BUILD_IMAGE; then
        docker build ci --tag $_BUILD_IMAGE
        docker push $_BUILD_IMAGE
      fi

  - id: "load-cache"
    name: $_BUILD_IMAGE
    waitFor: ["build-ci-base-image"]
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      source scripts/ci.sh
      load-cache

  - id: "build-deps"
    name: $_BUILD_IMAGE
    waitFor: ["load-cache"]
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      apt update
      apt install -y liblzma-dev

      stack config set system-ghc --global true
      stack config set install-ghc --global false

      stack build \
        --no-terminal \
        stylish-haskell hlint weeder

      stack build \
        --no-terminal \
        --test \
        --dependencies-only

  - id: "save-cache"
    waitFor: ["build-deps"]
    name: $_BUILD_IMAGE
    entrypoint: 'bash'
    env:
    - BRANCH_NAME=$BRANCH_NAME
    args:
    - '-c'
    - |
      set -euxo pipefail

      source scripts/ci.sh
      save-cache

  # - id: "Format"
  #   name: $_BUILD_IMAGE
  #   env: ['STACK_ROOT=/workspace/.stack']
  #   args: ['./scripts/check-fmt.sh']

  # - id: "Lint"
  #   name: $_BUILD_IMAGE
  #   env: ['STACK_ROOT=/workspace/.stack']
  #   args: ['stack', 'exec', '--', 'hlint', '.']

  - id: "build"
    name: $_BUILD_IMAGE
    waitFor: ["build-deps"]
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail
      mkdir ./bin
      apt update
      apt install -y liblzma-dev
      stack install \
        --no-terminal \
        --fast \
        --test \
        --no-run-tests \
        --local-bin-path .

  # TODO spawn a speparate job for this (from release.yaml)
  # - id: "build-fcl-image"
  #   name: 'gcr.io/kaniko-project/executor:latest'
  #   waitFor: ['build']
  #   args:
  #   - --destination=gcr.io/$PROJECT_ID/fcl
  #   - --destination=gcr.io/$PROJECT_ID/fcl:$BRANCH_NAME
  #   - --cache=true

  - id: "test"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    waitFor: ['build']
    args:
    - '-c'
    - |
      set -euxo pipefail

      stack test fcl:fcl-test --no-terminal --system-ghc

  # TODO - this looks useful to re-enable
  # - id: "Lint (weeder)"
  #   waitFor: ["Build"]
  #   name: $_BUILD_IMAGE
  #   env: ["STACK_ROOT=/workspace/.stack"]
  #   args: ["stack", "exec", "--", "weeder", "--match"]


  # - id: "Build reference document and swagger spec"
  #   waitFor:
  #   - "build"
  #   name: $_BUILD_IMAGE
  #   env: ['STACK_ROOT=/workspace/.stack']
  #   entrypoint: bash
  #   args:
  #   - '-c'
  #   - |
  #     set -euxo pipefail

  #     mv docs/source/reference.rst oldref
  #     mv docs/source/daemon-api.yaml oldswagger
  #     RADPATH="$(pwd)/rad" stack exec radicle-ref-doc
  #     if ! (diff oldref docs/source/reference.rst); then
  #       echo "Reference docs are not checked in"
  #       exit 1
  #     fi
  #     if ! (diff oldswagger docs/source/daemon-api.yaml); then
  #       echo "Daemon swagger spec is not checked in"
  #       exit 1
  #     fi


  # - id: "run-release"
  #   waitFor: [ "tests", "Network tests", "Network profile tests" ]
  #   name: $_BUILD_IMAGE
  #   env: ['STACK_ROOT=/workspace/.stack']
  #   entrypoint: 'bash'
  #   args:
  #   - "-c"
  #   - |
  #     set -euxo pipefail

  #     [[ "$BRANCH_NAME" == "master" ]] && \
  #       (
  #         ./tools/mksettings.sh
  #         ./release.sh $SHORT_SHA

  #         gsutil cp -r release/$SHORT_SHA gs://uplink-dev-releases/$SHORT_SHA
  #       ) || echo "Not on master branch, skipping . . ."
